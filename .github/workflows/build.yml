name: Build

permissions:
  contents: write

on:
  push:
    branches: '**'
    tags:
      - v[0-9]+.*

jobs:
  e2e-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-test-
      - uses: actions/checkout@v4
      - name: E2E Tests in Sind
        run: RUST_BACKTRACE=1 make run-e2e-tests-docker
  build:
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
    runs-on: ${{ matrix.os }}
    env:
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.TARGET }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ matrix.TARGET }}-cargo-build-
      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf protobuf-compiler libprotobuf-dev
          fi
          
          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          EOF
      - name: Install rust target
        run: rustup target add $TARGET
      - name: Normal Tests
        run: cargo test
      - name: Build Binaries
        run: cargo build --locked --release --target ${{ matrix.target }}
      - name: Archive artifacts
        if: github.ref_type == 'tag'
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.TARGET}}
          path: |
            target/${{matrix.TARGET}}/release/skate
            target/${{matrix.TARGET}}/release/skatelet
  create-release:
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/create-gh-release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  release:
    needs: [ build, e2e-test, create-release ]
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    strategy:
      matrix:
        include:
            - target: aarch64-apple-darwin
            - target: aarch64-unknown-linux-gnu
            - target: x86_64-unknown-linux-gnu
    env:
      TARGET: ${{ matrix.TARGET }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{matrix.TARGET}}
          path: |
            target/${{matrix.TARGET}}/release
      - name: Archive and upload
        run: |
          mkdir -p dist
          cd dist 
          cp ../target/$TARGET/release/skate .
          cp ../target/$TARGET/release/skatelet .
          chmod +x skate
          chmod +x skatelet
          tar -cvf skate-$TARGET.tar.gz skate
          tar -cvf skatelet-$TARGET.tar.gz skatelet
          gh release upload ${{github.ref_name}}  *.tar.gz
